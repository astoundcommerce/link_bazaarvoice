/**
 *
 * A library file for BazaarVoice communication.
 *
 * It cannot be used as a pipelet.
 *
 */
importPackage(dw.system);
importPackage(dw.order);
importPackage(dw.rpc);
importPackage(dw.util);
importPackage(dw.value);
importPackage(dw.crypto);
importPackage(dw.io);
importPackage(dw.net);
importPackage(dw.catalog);

importScript( "int_bazaarvoice:/lib/libConstants.ds" );

/**
 * Used building output as Hex
 */
var DIGITS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
var USER_STRING_TEMPLATE: String = "date={0}&userid={1}&username={2}";

var CONST_SMARTSEO_BVRRP = "bvrrp";
var CONST_SMARTSEO_BVQAP = "bvqap";
var CONST_SMARTSEO_BVSYP = "bvsyp";

var BazaarVoiceHelper = {
	
	/*******************************************************************************************************************
	*  getImageURL()
	*
	*	Returns a product image url for use in the product and purchase feeds.  By default,
	*	the custom site preferences for image type is used to get the url: e.g. large, medium, small.
	*	If no image is found, the medium image is used.  If no medium image is found, an empty string is returned.
	*
	*	feed parameter is either "PRODUCT" or "PURCHASE", defaults to PRODUCT.
	*
	*	If you do not use the standard DW product images (scene7, SITS, etc.), you must customize this function!
	*******************************************************************************************************************/
	getImageURL : function(product : Product, feed : String) : String {
		var IMAGE_SIZE : String = "";
 		var imgURL : String = "";
 
		if(feed.equals(BV_Constants.PURCHASE)) {
			if(Site.getCurrent().getCustomPreferenceValue("bvOrderImageType") != null) {
				IMAGE_SIZE = Site.getCurrent().getCustomPreferenceValue("bvOrderImageType").toString();
			}
		}
		else {
			if(Site.getCurrent().getCustomPreferenceValue("bvProductImageType") != null) {
				IMAGE_SIZE = Site.getCurrent().getCustomPreferenceValue("bvProductImageType").toString();
			}
		}
		
		if(!empty(IMAGE_SIZE) && product.getImage(IMAGE_SIZE)) {
			imgURL = product.getImage(IMAGE_SIZE).getAbsURL();
		}
		else if(product.getImage(BV_Constants.BV_DEFAULTIMAGETYPE)) {
			imgURL = product.getImage(BV_Constants.BV_DEFAULTIMAGETYPE).getAbsURL();
		}
		
		return imgURL;
	},
	/******************************************************************************************************************
	*******************************************************************************************************************/
	
	getCustomerName : function() : String {
		var name : String = "";
		if(Site.getCurrent().getCustomPreferenceValue("bvCustomerName") != null){
			name = Site.getCurrent().getCustomPreferenceValue("bvCustomerName").toString();
		}
		return name;
	},

    replaceIllegalCharacters: function (rawId: String): String {
        return rawId.replace("&", "_and_");
    },

    decodeId: function (id: String) {
        if (id.indexOf("_and_") != -1) {
            return id.replace("_and_", "&");
        } else {
            return id;
        }
    },

    md5: function (data: String) {
        var digest: MessageDigest = new MessageDigest(MessageDigest.DIGEST_MD5);
        return digest.digest(data);
    },

    encodeHex: function (data: String) {
        var l: Number = data.length;
        var out: String = "";
        // two characters form the hex value.
        for (var i = 0; i < l; i++) {
            out += DIGITS[(0xF0 & data.charCodeAt(i)) >>> 4];
            out += DIGITS[0x0F & data.charCodeAt(i)];
        }
        return out;
    },

    encryptReviewerId: function (reviewerId: String, reviewerNickname: String) {
        if (!empty(reviewerId) && !empty(reviewerNickname)) {
            var dateAndreviewerId: String = StringUtils.format(USER_STRING_TEMPLATE, StringUtils.formatCalendar(new Calendar(), 'yyyyMMdd'), reviewerId, reviewerNickname);

            var sharedKey: String = Site.getCurrent().getCustomPreferenceValue("bvEncodingKey");
            var md5String: String = BazaarVoiceHelper.md5(sharedKey + dateAndreviewerId);
            var hexUserID: String = BazaarVoiceHelper.encodeHex(dateAndreviewerId);

            return md5String + hexUserID;
        }
        return null;
    },

    getBvUrl: function (isStatic: boolean, bvProduct : String, bvDisplayCode : String): String {
        var protocol = request.httpProtocol;
        var hostSubdomain = BazaarVoiceHelper.getSubDomainForBVProduct(bvProduct);
        var hostDomain = Site.getCurrent().getCustomPreferenceValue("bvHostDomain");
        var bvStaging = BazaarVoiceHelper.getBvStaging();
        var stat = "";
        if (isStatic) {
            stat = "static/";
        }

        return protocol + "://" + hostSubdomain + "." + hostDomain + bvStaging + stat + bvDisplayCode;
    },

    getBvApiHostUrl: function (displayCode): String {
        var protocol = request.httpProtocol;
        var bvApiHostname = Site.getCurrent().getCustomPreferenceValue("bvAPIHostname");
        var bvStaging = BazaarVoiceHelper.getBvStaging();
        var bvDefaultDisplayCode = displayCode;

        return protocol + "://" + bvApiHostname + bvStaging + "static/" + bvDefaultDisplayCode;
    },

    getBvStaging: function (): String {
        var bvStaging = Site.getCurrent().getCustomPreferenceValue("bvStaging");
        if (bvStaging == "") {
            bvStaging = "/";
        } else {
            //Add the leading slash if it doesn't already have it
            if (bvStaging.match("^\/") != "/") {
                bvStaging = "/" + bvStaging;
            }
            //Add the trailing slash if it doesn't already have it
            if (bvStaging.match("\/$") != "/") {
                bvStaging = bvStaging + "/";
            }
        }
        return bvStaging;
    }, 
    
    getExternalSubjectForPage: function(pdict : PipelineDictionary) : Object {
        var ret = {};
        
        var bvExternalSubjectID = null;
        if (pdict.Product != null) {
            ret.bvSubjectType = "product";
            ret.bvExternalSubjectName = (pdict.Product.variant) ? pdict.Product.variationModel.master.name : pdict.Product.name;
            bvExternalSubjectID = (pdict.Product.variant) ? pdict.Product.variationModel.master.ID : pdict.Product.ID;
        } else if (pdict.Category != null) {
            ret.bvSubjectType = "category";
            ret.bvExternalSubjectName = pdict.Category.name;
            bvExternalSubjectID = pdict.Category.ID;
        } else if (pdict.ProductSearchResult != null && pdict.ProductSearchResult.category != null ) {
            ret.bvSubjectType = "category";
            ret.bvExternalSubjectName = pdict.ProductSearchResult.category.displayName;
            bvExternalSubjectID = pdict.ProductSearchResult.category.ID;
        }
        else if (pdict.ProductSearchResult != null && pdict.ProductSearchResult.deepestCommonCategory != null ) {
            ret.bvSubjectType = "category";
            ret.bvExternalSubjectName = pdict.ProductSearchResult.deepestCommonCategory.displayName;
            bvExternalSubjectID = pdict.ProductSearchResult.deepestCommonCategory.ID;
        }

        if (bvExternalSubjectID != null) {
            ret.bvExternalSubjectID = BazaarVoiceHelper.replaceIllegalCharacters(bvExternalSubjectID);
        }
        
        return ret;
    }, 
    
    getSmartSEOContent: function(pdict : PipelineDictionary, bvProduct : String, bvDisplayCode : String, bvSubject : Object, pageFormat : String) : String {
        var baseFolder : String = "smartSEO/";
        
        var content : String = null;
        var smartSEOEnabled = Site.getCurrent().getCustomPreferenceValue("bvEnableSmartSEO");
        if (smartSEOEnabled) {
            var displayCode = bvDisplayCode;
            if (pageFormat != "") {
            	pageFormat += "/";
            }     
            var smartSEOFile : File = new File(new File(File.IMPEX),baseFolder + displayCode + "/" + bvProduct + "/" + bvSubject.bvSubjectType + "/1/" + pageFormat + bvSubject.bvExternalSubjectID + ".htm");
            
            if (!empty(pdict.CurrentHttpParameterMap)) {
                if (pdict.CurrentHttpParameterMap.isParameterSubmitted(CONST_SMARTSEO_BVRRP)) {
                    smartSEOFile = new File(new File(File.IMPEX), baseFolder + pdict.CurrentHttpParameterMap.get(CONST_SMARTSEO_BVRRP).stringValue);
                }else if (pdict.CurrentHttpParameterMap.isParameterSubmitted(CONST_SMARTSEO_BVQAP)) {
                    smartSEOFile = new File(new File(File.IMPEX), baseFolder + pdict.CurrentHttpParameterMap.get(CONST_SMARTSEO_BVQAP).stringValue);
                }else if (pdict.CurrentHttpParameterMap.isParameterSubmitted(CONST_SMARTSEO_BVSYP)) {
                    smartSEOFile = new File(new File(File.IMPEX), baseFolder + pdict.CurrentHttpParameterMap.get(CONST_SMARTSEO_BVSYP).stringValue);
                }
            }

            if (smartSEOFile.exists()) {
                var reader : FileReader = new FileReader(smartSEOFile);
                content = reader.getString();
                reader.close();
            }

            //Replace any occurrences of "{INSERT_PAGE_URI}" with product or category page URL, ensuring that it ends with either ? or & as appropriate.
            if (content) {
                var currentPage = pdict.CurrentRequest.getHttpProtocol()+'://'+pdict.CurrentRequest.getHttpHost()+pdict.CurrentRequest.getHttpPath();
                currentPage += "?";
                if (!empty(pdict.CurrentRequest.getHttpQueryString())) {
                	for each(var param : String in pdict.CurrentHttpParameterMap.getParameterNames()){
                		if (param != CONST_SMARTSEO_BVRRP && param != CONST_SMARTSEO_BVQAP && param != CONST_SMARTSEO_BVSYP) {
                			currentPage += param + "=" + pdict.CurrentHttpParameterMap.get(param) + "&";
                		}
                	}
                }
                
                content = content.replace(/{INSERT_PAGE_URI}/g, currentPage);
            }
        }
        return content;
    },  
    
    getSubDomainForBVProduct: function(bvProduct : String) : String {
        if (bvProduct == "questions") {
            return Site.getCurrent().getCustomPreferenceValue("bvAASubDomain");
        } else if (bvProduct == "stories") {
            return Site.getCurrent().getCustomPreferenceValue("bvSYSubDomain");
        } else if (bvProduct == "activeprofiles") {
            return Site.getCurrent().getCustomPreferenceValue("bvCPSubDomain");
        }
        
        // Default to RR display code
        return Site.getCurrent().getCustomPreferenceValue("bvRRSubDomain");
    },
    
    getActiveProfilesEditProfileLink: function(customerNo : String, customerNick : String) : String {
        //Construct a URL that looks like the following.
        //http://ugc.int-demandware.bazaarvoice.com/bvstaging/profiles/6725/editprofile.htm?user=[TO-DO: REPLACE WITH ENCODED USER]
     
        var protocol = request.httpProtocol;
        var bvCPSubDomain = Site.getCurrent().getCustomPreferenceValue("bvCPSubDomain");
        var bvHostDomain = Site.getCurrent().getCustomPreferenceValue("bvHostDomain");
        var bvStaging = BazaarVoiceHelper.getBvStaging();
        var bvCPDefaultDisplayCode = Site.getCurrent().getCustomPreferenceValue("bvCPDefaultDisplayCode");
        var bvUAS = BazaarVoiceHelper.encryptReviewerId(customerNo, customerNick);
        
        return protocol + "://" + bvCPSubDomain + "." + bvHostDomain + bvStaging + "profiles/" + bvCPDefaultDisplayCode + "/editprofile.htm?user=" + bvUAS;
    },
    
    finalizeFeed: function(xsw : XMLStreamWriter) {
        xsw.writeEndElement();  //</Feed>
        xsw.writeEndDocument();
   
        xsw.flush();
        xsw.close();
    },

    writeElement: function(xsw : XMLStreamWriter, elementName : String, chars : String) {
        xsw.writeStartElement(elementName);
        xsw.writeCharacters(chars);
        xsw.writeEndElement();
    },

    insertLeadingZero: function(nb : Number) : String {
        if(nb < 10) {
            return "0"+nb;
        } else {
            return ""+nb;
        }
    },
    
    uploadFile: function(destinationPath : String, destinationFilename : String, localFile : File, pdict : PipelineDictionary) : String {
    	var ftpClient : SFTPClient = new SFTPClient();
    	
        var host  : String = Site.getCurrent().getCustomPreferenceValue("bvFTPHost");
        if(empty(host)){
			Logger.error("bvFTPHost is null or empty!");
			return StringUtils.format(BV_Constants.MESSAGE_TEMPLATE,"ERROR", "Error while trying to connect to BV FTP server: bvFTPHost is null or empty!","", "", "", "", "");
        }
        
        var user  : String = Site.getCurrent().getCustomPreferenceValue("bvCustomerName");
        if(empty(user)){
			Logger.error("bvCustomerName is null or empty!");
			return StringUtils.format(BV_Constants.MESSAGE_TEMPLATE,"ERROR", "Error while trying to connect to BV FTP server: bvCustomerName is null or empty!","", "", "", "", "");
        }
        
        var pwd   : String = Site.getCurrent().getCustomPreferenceValue("bvFTPPassword");
        if(empty(pwd)){
			Logger.error("bvFTPPassword is null or empty!");
			return StringUtils.format(BV_Constants.MESSAGE_TEMPLATE,"ERROR", "Error while trying to connect to BV FTP server: bvFTPPassword is null or empty!","", "", "", "", "");
        }
        
        if(!ftpClient.connect(host, user, pwd)) {
        	Logger.error("Could not connect to sftp server! host: {0}, user: {1}, pwd: {2}, path: {3}, file: {4}", host, user, pwd, destinationPath, destinationFilename);
            return StringUtils.format(BV_Constants.MESSAGE_TEMPLATE,"ERROR", "Error while trying to connect to BV FTP server.",host, user, "XXXXX", destinationPath, destinationFilename);
        } 
        
        if( !ftpClient.cd(destinationPath)) {
        	Logger.error("Could not change directory on sftp server! host: {0}, user: {1}, pwd: {2}, path: {3}, file: {4}", host, user, pwd, destinationPath, destinationFilename);
            ftpClient.disconnect();        
            return StringUtils.format(BV_Constants.MESSAGE_TEMPLATE,"ERROR", "Error while accessing folder on BV FTP Server.",host, user, "XXXXX", destinationPath, destinationFilename);            
		}
                
        //there might be an old one
        ftpClient.del(destinationFilename);
        
        // send file to server
        var success = ftpClient.putBinary(destinationFilename, localFile);
        ftpClient.disconnect();
        return StringUtils.format(BV_Constants.MESSAGE_TEMPLATE,"SUCCESS", "Export Processed - Connecton Details" ,host, user, "XXXXX", destinationPath, destinationFilename);
    
    },
    
    checkForDuplicateDisplayCodes: function(dcArray : Array, type : String) {
    	
		//var regPair : RegExp = /([a-z]{2}|[a-z]{2}_[a-zA-Z]{2}):\d{4}-[a-z]{2}_[a-zA-Z]{2}/;
		//var regDefault : RegExp = /default:\d{4}-[a-z]{2}_[a-zA-Z]{2}/;
		var regPair : RegExp = /^(default|[a-z]{2}|[a-z]{2}_[a-zA-Z]{2}):\d{4,5}([a-zA-Z]*)?-[a-z]{2}_[a-zA-Z]{2}$/;
		
		var currentLocale : String = request.locale;
		var defaultLocale : String = Site.getCurrent().getDefaultLocale();
		var isCurrentDefault : Boolean = currentLocale.equals(defaultLocale);
		
		var dupArray : Array = new Array();
    	var tmpArray : Array = new Array();
    	
    	for each(var item : String in dcArray){
    		item = item.replace(/[\s|\"]/g,"");
							
			if(regPair.test(item)){				
				var a = item.split(":");			
				if(tmpArray.indexOf(a[0]) == -1){
					tmpArray.push(a[0]);
				}else{
					dupArray.push(a[0]);
					Logger.error(type + " Display Code Mapping has duplicate dwLocale " + a[0] + " to bvDisplayCode " + a[1]);
				}
			}
			else if(dcArray.length > 1) {
				Logger.error(type + " Display Code Mapping has invalid bvDisplayCode " + item);
			}
    	}
    
    
    	return;
    }

};



// Helper method to export the helper

function getBazaarVoiceHelper() {
    return BazaarVoiceHelper;
}