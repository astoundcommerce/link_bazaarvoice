/**
* libCloudSEO.ds
*
*	Library code to render the Cloud SEO content.
*	Based on the PHP SDK found at 
*	https://github.com/bazaarvoice/HostedUIResources/blob/master/SEOIntegration/examples/php/bvseosdk.php
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.net );

importScript( "int_bazaarvoice:/lib/libConstants.ds" );
importScript( "int_bazaarvoice:/lib/libBazaarvoice.ds" );

/**
* BVSEO class
*
*	Usage:
*		var bvSeo = getBVSEO({
*			"deployment_zone_id" : "12345",
*			"product_id" : "123456789",
*			"cloud_key" : "123123123asdasdasd"
*		});
*		bvSeo.renderReviewContent();
*		bvSeo.renderQuestionContent();
*
*   Required fields:
*      deployment_zone_id (string)
*      product_id (string)
*      cloud_key (string)
*
*	Optional fields
*      	current_page_url (string) (defaults to detecting the current_page automtically)
*      	staging (boolean) (defaults to true, need to put false when go to production)
*      	subject_type (string) (defaults to product, for questions you can pass in categories here if needed)
*      	latency_timeout (int) (in millseconds) (defaults to 1000ms)
*		bv_product (string) (defaults to reviews which is the only supported product right now)
*   	bot_list (string) (defualts to msnbot|googlebot|teoma|bingbot|yandexbot|yahoo)
*		bot_detection (boolean) (defaults to true, only rendering content if a bot is detected, or bvreveal is a uri parameter)
*/
function BVSEO() {
	
	//put this first so it can initialize the current_page_url paramter
	/******************
	* PRIVATE METHODS *
	******************/
	var _getCurrentUrl = function() {
		var url = "http://";
		if(request.isHttpSecure()) {
			url = "https://";
		}
		url += request.httpHost + request.httpPath.replace("Product-Detail", "Product-Show");
		if(!empty(request.httpQueryString)) {
			url += "?" + request.httpQueryString;
		}
		return url;
	};
	
	
	/******************
	* PRIVATE MEMBERS *
	******************/
	var _reviews, _questions;
	var configMap : HashMap = new HashMap();
	
	//required configurations, no defaults
	configMap["product_id"] = "";
	configMap["deployment_zone_id"] = "";
	configMap["cloud_key"] = "";
	
	//optional configurations
	configMap["staging"] = true;
	configMap["current_page_url"] = _getCurrentUrl();
	configMap["subject_type"] = "product";
	configMap["execution_timeout"] = 500;
	configMap["execution_timeout_bot"] = 2000;
	configMap["charset"] = "UTF-8";
	configMap["bv_product"] = "reviews";
	configMap["bot_list"] = "(msnbot|google|teoma|bingbot|yandexbot|yahoo)";
	configMap["bot_detection"] = true;
	configMap["seo_sdk_enabled"] = true;
	configMap["page"] = 1;
	configMap["page_params"] = [];
	configMap["bvreveal"] = request.httpParameters.containsKey("bvreveal") ? request.httpParameters["bvreveal"][0] : "";
	configMap["ssl_enabled"] = false;
	
	
	/******************
	* PUBLIC METHODS  *
	******************/
	return {
		init : function(config) {
			for(var param in config) {
				if(configMap.containsKey(param)) {
					configMap[param] = config[param];
				}
				else {
					Logger.debug("[libCloudSEO.ds] Incorrect parameter passed to BVSEO: " + param);
				}
			}
			
			//we may need to pull the bvreveal parameter from the session
			if(empty(configMap["bvreveal"]) && !empty(session.custom.bvreveal)) {
				configMap["bvreveal"] = session.custom.bvreveal;
			}
			
			_reviews = new SEOContent(configMap, "reviews");
			_questions = new SEOContent(configMap, "questions");
		},
		
		reviews : function() {
			return _reviews;
		},
		
		questions : function() {
			return _questions;
		}
		
	};
}




/**
* class SEOContent
*
*/
function SEOContent(config : HashMap, seoProduct : String) {
	var configMap : HashMap;
	if(config == null || config.empty) {
		Logger.error("[libCloudSEO.ds] Cannot create SEOContent object.  Config parameter is null or empty.");
		return null;
	}
	configMap = config.clone();
	
	if(!empty(seoProduct)) {
		configMap["bv_product"] = seoProduct;
	}
	
	
	
	var msg = "";
	var seo_url = "";
	var response_time = 0;
	
	/******************
	* PRIVATE METHODS *
	******************/
	
	/**
	* _setBuildMessage
	*
	*/
	var _setBuildMessage = function(str){
		str = StringUtils.rtrim(str);
		msg += " " + str + ";";
	};
	
	/**
	* _getBVReveal()
	*
	*/
	var _getBVReveal = function() {
		if(!empty(configMap["bvreveal"]) && configMap["bvreveal"] == "debug") {
			return true;
		}
		
		return false;
	};
	
	/**
	* isBot()
	*
	* Helper method to determine if current request is a bot or not. Will 
    * use the configured regex string which can be overriden with params.
    */
	var _isBot = function() {
		// we need to check the user agent string to see if this is a bot,
        // unless the bvreveal parameter is there or we have disabled bot
        // detection through the bot_detection flag
		if(_getBVReveal()) {
			return true;
		}
		
		// search the user agent string for an indictation if this is a search bot or not
		var regex : RegExp = new RegExp(configMap["bot_list"]);
		Logger.debug("[libCloudSEO.ds] isBot() regex: " + configMap['bot_list']);
		Logger.debug("[libCloudSEO.ds] isBot() result: " + regex.test(request.httpUserAgent.toLowerCase()));
		return regex.test(request.httpUserAgent.toLowerCase());
	};
	
	//set the timeout
	configMap["latency_timeout"] = _isBot() ? configMap['execution_timeout_bot'] : configMap['execution_timeout'];
	
	
	
	/**
	* getPageNumber()
	*
	* Helper method to pull from the URL the page of SEO we need to view.
	*/
	var _getPageNumber = function() {
		//default to page 1 if a page is not specified in the URL
		var pageNumber = "1";
		
		if(configMap.containsKey("page") && configMap["page"] != pageNumber) {
			pageNumber = configMap["page"];
		}
		
		//some implementations wil use bvpage query parameter like ?bvpage=2
		else if(request.httpParameters.containsKey("bvpage")) {
			pageNumber = request.httpParameters["bvpage"][0];
			
			//remove the bvpage parameter from the current URL so we don't keep appending it
			var param = request.httpParameters["bvpage"][0].replace("/", "\/", "g");
			var regex : RegExp = new RegExp("[?&]bvpage=" + param);
			configMap["current_page_url"] = configMap["current_page_url"].replace(regex, "");
		}
		//other implementations use the bvrrp, bvqap, or bvsyp parameter ?bvrrp=1234-en_us/reviews/product/2/ASF234.htm
		else if(request.httpParameters.containsKey("bvrrp") || request.httpParameters.containsKey("bvqap") || request.httpParameters.containsKey("bvsyp")) {
			var param;
			if(request.httpParameters.containsKey("bvrrp")) {
				param = request.httpParameters["bvrrp"][0].replace("/", "\/", "g");
				var regex : RegExp = new RegExp("[?&]bvrrp=" + param);
				configMap["current_page_url"] = configMap["current_page_url"].replace(regex, "");
			}
			else if(request.httpParameters.containsKey("bvqap")) {
				param = request.httpParameters["bvqap"][0].replace("/", "\/", "g");
				var regex : RegExp = new RegExp("[?&]bvqap=" + param);
				configMap["current_page_url"] = configMap["current_page_url"].replace(regex, "");
			}
			else {
				param = request.httpParameters["bvsyp"][0].replace("/", "\/", "g");
				var regex : RegExp = new RegExp("[?&]bvsyp=" + param);
				configMap["current_page_url"] = configMap["current_page_url"].replace(regex, "");
			}
			
			var regex : RegExp = /\/(\d+?)\/[^\/]+$/;
			var matches = request.httpQueryString.match(regex);
			pageNumber = matches[1];
		}
		
		return pageNumber;
	};
	
	/**
	* buildSeoUrl()
	*
	* Helper method to that builds the URL to the SEO payload
	*/
	var _buildSeoUrl = function(page : String) {
		//staging or production?
		var host : String = BV_Constants.SEOHostStaging;
		if(configMap["staging"] == false) {
			host = BV_Constants.SEOHostProduction;
		}
		var scheme = configMap["ssl_enabled"] ? "https://" : "http://";
		
		var url = scheme + host;
		url += "/" + configMap["cloud_key"];
		url += "/" + encodeURI(configMap["deployment_zone_id"].replace(" ", "_", "g"));
		url += "/" + configMap["bv_product"];
		url += "/" + configMap["subject_type"];
		url += "/" + page;
		url += "/" + encodeURI(configMap["product_id"]) + ".htm";
		
		Logger.debug("[libCloudSEO.ds] seoUrl: " + url);
		return url;
	};
	
	/**
	* fetchSeoContent()
	*
	* Helper method that will take in a URL and return it's payload
	*/
	var _fetchSeoContent = function(url : String) {
		try {
			var client : HTTPClient = new HTTPClient();
			client.setTimeout(configMap["latency_timeout"]);
			client.open("GET", url);
			var timer : Calendar = new Calendar();
			client.send();
			var timer2 : Calendar = new Calendar();
			var timespan : Number = timer2.getTime().getTime() - timer.getTime().getTime(); 
			
			if(client.statusCode == 200) {
				response_time = timespan;
				var msg : String = client.text;
				return msg; 
			}
			else if(client.statusCode >= 400) {
				throw new Error("Http repsonse status: " + client.statusCode + " - " + client.statusMessage);
			}
			else {
				throw new Error("Http repsonse status: " + client.statusCode + " - " + client.statusMessage);
			}
		}
		catch(ex) {
			Logger.error("[libCloudSEO.ds] Exception while retrieving cloud content from " + url + ": " + ex.message);
			_setBuildMessage(ex.message);
			return "";
		}
	};
	
	/**
	* replaceTokens()
	*
	* After we have an SEO payload we need to replace the {INSERT_PAGE_URI}
	* tokens with the current page url so pagination works. 
	*/
	var _replaceTokens = function(content : String) {
		//determine if query string exists in current page url
		var prefix : String = "?";
		if(configMap["current_page_url"].indexOf("?") != -1) {
			prefix = "&";
		}
		return content.replace("{INSERT_PAGE_URI}", configMap["current_page_url"] + prefix, "g");
	};
	
	/**
	* buildComment()
	*
	* Helper method to add a comment to the seo content
	*/
	var _buildComment = function(method : String) {
		var footer = '\n<ul id="BVSEOSDK_meta" style="display: none !important;">';
		footer += '\n	<li data-bvseo="sdk">bvseo_sdk, '+ BV_Constants.CLOUD_SEO_VERSION +', p_sdk_3.2.0</li>';
		footer += '\n	<li data-bvseo="sp_mt">CLOUD, '+method+', '+response_time+'ms</li>';
		footer += '\n	<li data-bvseo="ct_st">'+configMap["bv_product"]+', '+configMap["subject_type"]+'</li>';
		if(!empty(msg)) {
			footer += '\n	<li data-bvseo="ms">bvseo-msg: '+msg+'</li>';
		}
		footer += '\n</ul>';
		
		if(_getBVReveal()) {
			footer += '\n<ul id="BVSEOSDK_DEBUG" style="display:none;">';
			footer += '\n	<li data-bvseo="staging">'+configMap["staging"]+'</li>';
			footer += '\n	<li data-bvseo="seo.sdk.enabled">'+configMap["seo_sdk_enabled"]+'</li>';
			footer += '\n	<li data-bvseo="seo.sdk.execution.timeout.bot">'+configMap["execution_timeout_bot"]+'</li>';
			footer += '\n	<li data-bvseo="seo.sdk.execution.timeout">'+configMap["execution_timeout"]+'</li>';
			footer += '\n	<li data-bvseo="cloudKey">'+configMap["cloud_key"]+'</li>';
			footer += '\n	<li data-bvseo="bv.root.folder">'+encodeURI(configMap["deployment_zone_id"].replace(" ", "_", "g"))+'</li>';
			footer += '\n	<li data-bvseo="seo.sdk.charset">'+configMap["charset"]+'</li>';
			footer += '\n	<li data-bvseo="seo.sdk.ssl.enabled">'+configMap["ssl_enabled"]+'</li>';
			footer += '\n	<li data-bvseo="crawlerAgentPattern">'+configMap["bot_list"]+'</li>';
			footer += '\n	<li data-bvseo="subjectID">'+encodeURI(configMap["product_id"])+'</li>';
			
			footer += '\n	<li data-bvseo="en">'+configMap["sdk_enabled"]+'</li>';
			footer += '\n	<li data-bvseo="pn">'+configMap["page"]+'</li>';
			footer += '\n	<li data-bvseo="userAgent">'+request.httpUserAgent.toLowerCase()+'</li>';
			footer += '\n	<li data-bvseo="pageURI">'+configMap["current_page_url"]+'</li>';
			footer += '\n	<li data-bvseo="contentType">'+configMap["bv_product"]+'</li>';
			footer += '\n	<li data-bvseo="subjectType">'+configMap["subject_type"]+'</li>';
			
			if(!empty(seo_url)) {
				footer += '\n	<li data-bvseo="contentURL">'+seo_url+'</li>';
			}
			footer += '\n</ul>';
		}
		
		return footer;
	};
	
	/**
	* toString()
	*
	* Print the config values of this object
	*/
	var _toString = function() {
		var str : String = "";
		for each(var key : String in configMap.keySet()) {
			if(key != "cloud_key") {
				str += "(" + key + " >>> " + configMap[key] + ")\n";
			}
		}
		return str;
	};
	
	
	
	/**
	* _isSdkEnabled
	*
	*/
	var _isSdkEnabled = function() {
		return configMap["seo_sdk_enabled"] || _getBVReveal();
	};
	
	/**
	* _getFullSeoContents
	*/
	var _getFullSeoContents = function(method) {
		var seo_content = "";
		
		var page_number = _getPageNumber();
		
		seo_url = _buildSeoUrl(page_number);
		
		if(_isSdkEnabled()) {
			seo_content = _fetchSeoContent(seo_url);
			
			seo_content = _replaceTokens(seo_content);
		} else {
			_setBuildMessage("SEO SDK is disabled. Enable by setting seo.sdk.enabled to true.");
		}
		
		return seo_content;
	};
	
	/**
	* _replaceSection()
	*/
	var _replaceSection = function(str, begin, end) {
		var result = str;
		var start_index = str.indexOf(begin);
		if(start_index != -1) {
			var end_index = str.indexOf(end);
			if(end_index != -1) {
				end_index += end.length;
				var str_begin = str.substring(0, start_index);
				var str_end = str.substring(end_index);
				result = str_begin + str_end;
			}
		}
		
		return result;
	};
	
	/**
	* _renderReviews()
	*/
	var _renderReviews = function() {
		var payload = _renderSEO("getReviews");
		
		payload = _replaceSection(payload, "<!--begin-aggregate-rating-->", "<!--end-aggregate-rating-->");
		
		var schema_org_text = "itemscope itemtype=\"http://schema.org/Product\"";
		payload = payload.replace(schema_org_text, "", "g");
		
		return payload;
	};
	
	/**
	* _renderAggregateRating()
	*/
	var _renderAggregateRating = function() {
		var payload = _renderSEO("getAggregateRating");
		
		payload = _replaceSection(payload, "<!--begin-reviews-->", "<!--end-reviews-->");
		
		payload = _replaceSection(payload, "<!--begin-pagination-->", "<!--end-pagination-->");
		
		return payload;
	};
	
	/**
	* _renderSEO
	*/
	var _renderSEO = function(method) {
		var payload : String = "";
		
		if(!_isBot() && configMap["latency_timeout"] == 0) {
			_setBuildMessage("EXECUTION_TIMEOUT is set to 0 ms; JavaScript-only Display.");
		} else {
			if(_isBot() && configMap["latency_timeout"] < 100) {
				configMap["latency_timeout"] = 100;
				_setBuildMessage("EXECUTION_TIMEOUT_BOT is less than the minimum value allowed. Minimum value of 100ms used.");
			}
			
			try {
				payload = _getFullSeoContents(method);
			} catch(ex) {
				_setBuildMessage(ex.message);
			}
		}
		
		payload += _buildComment(method);
		return payload;
	};
	
	
	/******************
	* PUBLIC METHODS  *
	******************/
	return {
		getContent : function() {
			var payload = _renderSEO("getContent"); 
			return payload;
		},
		
		getReviews : function() {
			var payload = "";
			
			if(configMap["bv_product"] == "questions") {
				_setBuildMessage("Content Type '" + configMap["content_type"] + "' is not supported by getReviews().");
				payload = _buildComment('getReviews');
			} else if(configMap["bv_product"] == "reviews") {
				payload = _renderReviews();
			}
			 
			return payload;
		},
		
		getAggregateRating : function() {
			var payload = "";
			
			if(configMap["bv_product"] == "questions") {
				_setBuildMessage("Content Type '" + configMap["content_type"] + "' is not supported by getAggregateRating().");
				payload = _buildComment('getAggregateRating');
			} else if(configMap["bv_product"] == "reviews") {
				payload = _renderAggregateRating();
			}
			
			return payload;
		}
	};
}

exports.getBVSEO = function(config) {
	//test for required parameters before we begin
	if(empty(config.product_id)) {
		Logger.error("[libCloudSEO.ds] Error initializing cloud SEO object.  Missing product_id.");
		return null;
	}
	
	/*
	* The BV cloud SEO SDKs all pass in the key and deployment zone id as config parameters.
	* For this cartridge, it makes more sense to pull the values from the Site Preferences here.
	* The only dynamic parameter is the product id, so why complicate the integration?
	*/
	config.cloud_key = dw.system.Site.getCurrent().getCustomPreferenceValue("bvCloudSEOKey_C2013");
	if(empty(config.cloud_key)) {
		Logger.error("[libCloudSEO.ds] Error initializing cloud SEO object.  Missing cloud_key.");
		return null;
	}
	
	var bvdisplay = getBazaarVoiceHelper().getDisplayData();
	
	/*
	* If the SEODisplayCode constant is empty, then try to use the Deployment Zone.
	*/
	config.deployment_zone_id = BV_Constants.SEODisplayCode;
	if(empty(config.deployment_zone_id)) {
		config.deployment_zone_id = bvdisplay.zone;
		if(empty(config.deployment_zone_id)) {
			Logger.error("[libCloudSEO.ds] Error initializing cloud SEO object.  Missing deployment_zone_id.  You must supply either bvCloudSEODisplayCode_C2013 or bvDeploymentZone_C2013");
			return null;
		}
	}
	
	var locale = bvdisplay.locale;
	if(!empty(locale)) {
		config.deployment_zone_id += "-" + locale;
	}
	
	/*
	* Check the site preference to decide if this is the staging or production environment.
	*/
	var env : String = getBazaarVoiceHelper().getEnvironment();
	if(!empty(env) && env.toLowerCase() == "production") {
    	config.staging = false;
    }
	
	var bvseo = new BVSEO();
	bvseo.init(config);
	return bvseo;
};