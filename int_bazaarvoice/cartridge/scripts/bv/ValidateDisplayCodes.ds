/**
* ValidateDisplayCodes.ds
*
* @output ValidCodes : Array
* @output CodeCount : Number
* @output SingleLocale : String
* @output Message : String
* 
*/
importPackage( dw.system );
importPackage( dw.util );

importScript( "int_bazaarvoice:/lib/libBazaarvoice.ds" );
importScript( "int_bazaarvoice:/lib/libConstants.ds" );

function execute( pdict : PipelineDictionary ) : Number
{
   var bvHelper = getBazaarVoiceHelper();

   var allowedLocales : ArrayList = Site.getCurrent().allowedLocales;
   var defaultLocale : String = Site.getCurrent().getDefaultLocale();
   var rrDCArray : Array = Site.getCurrent().getCustomPreferenceValue("bvRRDisplayCodeMapping");
   
   var validCodes : Array = new Array();
   var codeCount : Number = 0;

   //regFull is just a BV display code with locale
	//e.g. 1234-en_us, 12345-de_de, 1234redes-en_us, etc
	var regFull : RegExp = /^\d{4,5}([a-zA-Z]*)?-[a-z]{2}_[a-zA-Z]{2}$/;
	
	//regDigit is just the BV display code with no locale
	//e.g. 1234, 12345, 1234redes, 12345redes, etc
	var regDigit : RegExp = /^\d{4,5}([a-zA-Z]*)?$/;
	
	//regPair is a full mapping from DW locale to BV display code with locale
	//e.g. "de":"1234-de_de", "de_DE":"12345-de_de", "default":"1234redes-en_us", etc
	var regPair : RegExp = /^(default|[a-z]{2}|[a-z]{2}_[a-zA-Z]{2}):\d{4,5}([a-zA-Z]*)?-[a-z]{2}_[a-zA-Z]{2}$/;

   //Get rr displaycode for current locale
   if(rrDCArray.length > 1){
		var index = 0;
		var dupArray : Array = new Array();
		
		for each(var item : String in rrDCArray){
			item = item.replace(/[\s|\"]/g,"");
							
			if(regDigit.test(item)){
				Logger.error("[ExportProductFeed][ValidateDisplayCodes]Site Preferences bvRRDisplayCodeMapping has invalid input " + item);
			}else if(regFull.test(item) && dupArray.indexOf(defaultLocale) == -1){
				validCodes.push(item);
				dupArray.push(defaultLocale);
				codeCount++;
			}else if(regPair.test(item)){				
				var a = item.split(":");			
				if(allowedLocales.indexOf(a[0]) != -1 && dupArray.indexOf(a[0]) == -1){
					validCodes.push(item);
					dupArray.push(a[0]);
					codeCount++;
				}else{
					Logger.error("[ExportProductFeed][ValidateDisplayCodes]Site Preferences bvRRDisplayCodeMapping has inactive locale " + a[0]);
				}
			}
			
			if(index == rrDCArray.length - 1 && validCodes.length == 0){
				Logger.error("[ExportProductFeed][ValidateDisplayCodes]Site Preferences bvRRDisplayCodeMapping has no match setting for allowedlocales");
				pdict.Message = "Site Preferences bvRRDisplayCodeMapping has no match setting for allowedlocales";
			}
			
			index++;
		}

   }else if(rrDCArray.length == 1){
		var item : String = rrDCArray[0];
		
		item = item.replace(/[\s|\"]/g,"");
				
		if(regDigit.test(item) || regFull.test(item)){
			validCodes.push(item);
			codeCount++;
		}else if(regPair.test(item)){
			
			var a = item.split(":");
			if(allowedLocales.indexOf(a[0]) != -1 && a[0].equals(defaultLocale)){			
				validCodes.push(a[1]);
				codeCount++;
			}else if(allowedLocales.indexOf(a[0]) != -1 && !(a[0].equals(defaultLocale))){
				pdict.SingleLocale = a[0];
				validCodes.push(a[1]);
				codeCount++;
			}
		}else{
			codeCount = 0;
			pdict.Message = "Site Preferences bvRRDisplayCodeMapping does not have valid mapping for default locale" + defaultLocale;
			return PIPELET_ERROR;
		}
   }else{
   	  pdict.Message = "Site Preferences bvRRDisplayCodeMapping does not have valid mapping for default locale" + defaultLocale;
   }
   
   pdict.ValidCodes = validCodes;
   pdict.CodeCount = codeCount;

   return PIPELET_NEXT;
}
