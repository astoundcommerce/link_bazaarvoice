/**
* GetLocaleAndCode.ds
* get dwlocale and bvlocale
*
* @input ValidCode : String
* @input BVLocales : dw.util.HashMap
*
* @output BVLocales : dw.util.HashMap
* @output DWLocale : String
*/
importPackage( dw.system );
importPackage( dw.util );

function execute( pdict : PipelineDictionary ) : Number
{
	var validCode : String = pdict.ValidCode;
	var dwLocale : String = "";
	var bvLocale : String = "";
	var bvLocales : HashMap = pdict.BVLocales;	
	
	validCode = validCode.replace(/[\s|\"]/g,"");
	
	var regFull : RegExp = /^\d{4}-[a-z]{2}_[a-zA-Z]{2}$/;
	var regPair : RegExp = /([a-z]{2}|[a-z]{2}_[a-zA-Z]{2}):\d{4}-[a-z]{2}_[a-zA-Z]{2}/;
   	var regDefault : RegExp = /^default/;
   	
   	if(regDefault.test(validCode)){
   		var a = validCode.split(":");
   		//dwLocale = Site.getCurrent().defaultLocale;
   		dwLocale = a[0];
   		bvLocale = a[1];
   	}else if(regPair.test(validCode)){
   		var a = validCode.split(":");
   		dwLocale = a[0];
   		bvLocale = a[1]; 		   	
   	}else if(regFull.test(validCode)){
   		dwLocale = Site.getCurrent().defaultLocale;
   		bvLocale = validCode;    		
   	}
   	
   	
   	
   	var tmpLocale : String = bvLocale.substr(5);
	tmpLocale = tmpLocale.replace(/_[a-z]{2}(_[0-9a-zA-Z_]+)?/, tmpLocale.substr(2).toUpperCase());    
   	
   	bvLocales.put(dwLocale, tmpLocale);
   
   	pdict.DWLocale = dwLocale;
   	pdict.BVLocales = bvLocales;
	
    return PIPELET_NEXT;
}
