/**
* DownloadImportRatingFeed.ds
* Import localized rating statistic to each locale
*
* @output Message : String
* @output TempFile : dw.io.File
*/

var File = require('dw/io/File');
var Site = require('dw/system/Site');
var ServiceRegistry = require('dw/svc/ServiceRegistry');
var StringUtils = require('dw/util/StringUtils');
var Logger = require('dw/system/Logger').getLogger('Bazaarvoice', 'DownloadInlineRatingFeed.ds');

var BV_Constants = require('int_bazaarvoice/cartridge/scripts/lib/libConstants').getConstants();
var BVHelper = require('int_bazaarvoice/cartridge/scripts/lib/libBazaarvoice').getBazaarVoiceHelper();

function execute(pdict) {
	var tempFile;
    var host = '';
    var user = '';
    var pwd = '';
    var fpath = '';
    var fname = '';
    
    try {
    	var service = ServiceRegistry.get('bazaarvoice.sftp.' + Site.current.ID);
    	var result;
    	 
        fpath = BV_Constants.RatingsFeedPath;
		if(empty(fpath)){
			throw new Error('BV_Constants.RatingsFeedPath is null or empty! Verify the configuration in libConstants.ds');
		}
		fname = BVHelper.getRatingsFeedName();
		if(empty(fname)){
			throw new Error('BV_Constants.RatingsFeedFilename is null or empty! Verify the configuration in libConstants.ds');
		}
		
		result = service.setOperation('cd', fpath).call();
		if(!result.isOk()) {
			throw new Error('Error while accessing folder on BV FTP Server.');
		}
		
		tempFile = new File(File.TEMP + '/'+ 'ratings.xml.gz');
        result = service.setOperation('getBinary', fpath + '/' + fname, tempFile).call();
        if(result.isOk()) {
        	tempFile.gunzip(new File(File.TEMP));
        	tempFile = new File(File.TEMP + '/'+ 'ratings.xml');
        	if(!tempFile.exists()) {
        		throw new Error('GUNZIP of ratings.xml.gz was unsuccessful.  ratings.xml does not exist.');
        	}
			pdict.TempFile = tempFile;
        } else {
        	pdict.Message = StringUtils.format(BV_Constants.MESSAGE_TEMPLATE, 'INFO', result.msg, host, '', '', fpath, fname);
        	return PIPELET_ERROR;
        }
   } 
    catch (ex) {
    	Logger.error('Exception caught: {0}', ex.message);
        pdict.Message = StringUtils.format(BV_Constants.MESSAGE_TEMPLATE, 'ERROR', 'Exception=' + ex.message, host, '', '', fpath, fname);
        return PIPELET_ERROR;
    }

    return PIPELET_NEXT;
}