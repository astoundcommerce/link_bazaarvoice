/**
* bvImportLocalizedRatingFeed.ds
* Import localized rating statistic to each locale
*
*
* @input BVLocales : dw.util.HashMap
* @input LocaleID : String
* @input TempFile : dw.io.File
*
* @output Message : String
*/

importPackage( dw.system );
importPackage( dw.object );
importPackage( dw.catalog );
importPackage( dw.io );
importPackage( dw.util );

importScript("int_bazaarvoice:/lib/libBazaarvoice.ds");
importScript( "int_bazaarvoice:/lib/libConstants.ds" );

function execute(pdict: PipelineDictionary): Number {
    var BazaarVoiceHelper = getBazaarVoiceHelper();
    var localeID : String = pdict.LocaleID;
    var bvLocales : HashMap = pdict.BVLocales;
    
    try {
    	
    	//clean all the product first
    	var products : SeekableIterator = ProductMgr.queryAllSiteProducts();
		
		while(products.hasNext()){
			var product : Product = products.next();			
			product.custom.bvAverageRating = "0.0";
			product.custom.bvReviewCount = "0";
			product.custom.bvRatingRange = "0";
			
		}
    	
        var tempFile: File = pdict.TempFile;
        
        var productIds : Array = new Array();     
	    var xmlReader : XMLStreamReader = new XMLStreamReader(new FileReader(tempFile));
	    
	    var productXML : XML = null;
	    var iProcessed: Number = new Number(0);
	    var iFailed: Number = new Number(0);
	    var id: String = "";
	    var bvAverageRating: String = "";
	    var bvReviewCount: String = "";
	    var bvRatingRange: String = "";
	    
	    var reg : RegExp = /^\d{4}-[a-z]{2}_[a-zA-Z]{2}$/;
	    
	    while(xmlReader.hasNext()){	  
			xmlReader.next();	
			if (xmlReader.getEventType() == XMLStreamConstants.START_ELEMENT && xmlReader.getLocalName() == "Product")
			{
				productXML = xmlReader.getXMLObject();
				id = "";
				bvAverageRating = "0";
				bvReviewCount = "0.0";
				bvRatingRange = "0";
				
				var ns = productXML.namespace();
				if(!empty(productXML.ns::ExternalId.toString())){
					id = productXML.ns::ExternalId.toString();
										
					var localeItemList : XMLList = productXML.ns::ReviewStatistics.ns::LocaleDistribution.ns::LocaleDistributionItem;
					
					if (localeItemList.length() > 0) {	
						for each(var localeItem : XML in localeItemList){
																			
							var bvLocale : String = bvLocales.get(localeID);
							
							if(bvLocale != null){					    	
						    	if(!empty(localeItem.ns::DisplayLocale.toString()) && localeItem.ns::DisplayLocale.toString().equals(bvLocale)){
													
									if (!empty(localeItem.ns::ReviewStatistics.ns::AverageOverallRating.toString())) {
									    bvAverageRating = localeItem.ns::ReviewStatistics.ns::AverageOverallRating.toString();
									}
									if (!empty(localeItem.ns::ReviewStatistics.ns::TotalReviewCount.toString())) {
									    bvReviewCount = localeItem.ns::ReviewStatistics.ns::TotalReviewCount.toString();
									}
									if (!empty(localeItem.ns::ReviewStatistics.ns::OverallRatingRange.toString())) {
									    bvRatingRange = localeItem.ns::ReviewStatistics.ns::OverallRatingRange.toString();
									}
	
									break;
								}
							}
						}
					
						var product: Product = ProductMgr.getProduct(BazaarVoiceHelper.decodeId(id));
						if (product != null) {
						    product.custom.bvAverageRating = bvAverageRating;
						    product.custom.bvReviewCount = bvReviewCount;
						    product.custom.bvRatingRange = bvRatingRange;
						    
						    productIds.push(id);
						    iProcessed++;
						} else {
						    iFailed++;
						}									
					}			                
	    		}	    
	    	}
	    }
	
		//make sure all the product is updated
		var products : SeekableIterator = ProductMgr.queryAllSiteProducts();
		
		while(products.hasNext()){
			var product : Product = products.next();
			if(productIds.indexOf(product.ID) == -1 && (!empty(product.custom.bvAverageRating) || !empty(product.custom.bvReviewCount) || !empty(product.custom.bvRatingRange))){
				product.custom.bvAverageRating = "0.0";
				product.custom.bvReviewCount = "0";
				product.custom.bvRatingRange = "0";
			}
		}
		
	    pdict.Message = StringUtils.format(BV_Constants.MESSAGE_TEMPLATE_LOCALE, "SUCCESS", "Import Processed - Connecton Details", "", "", "", "", "", localeID)
	    pdict.Message += "Total Record Updated: " + + iProcessed.toString() + "\n";
	    pdict.Message += "Total Record Failed: " + iFailed.toString() + "\n";

    } catch (ex) {
		Logger.error("Exception caught: {0}", ex.message);
        pdict.Message = StringUtils.format(BV_Constants.MESSAGE_TEMPLATE_LOCALE, "ERROR", "Exception=" + ex.message, "", "", "", "", "", localeID);
        return PIPELET_ERROR;
    }

    return PIPELET_NEXT;
}