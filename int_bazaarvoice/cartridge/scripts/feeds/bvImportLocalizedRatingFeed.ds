/**
* bvImportLocalizedRatingFeed.ds
* Import localized rating statistic to each locale
*
*
* @input BVLocales : dw.util.HashMap
* @input LocaleID : String
* @input TempFile : dw.io.File
*
* @output Message : String
*/

var FileReader = require('dw/io/FileReader');
var ProductMgr = require('dw/catalog/ProductMgr');
var StringUtils = require('dw/util/StringUtils');
var XMLStreamConstants = require('dw/io/XMLStreamConstants');
var XMLStreamReader = require('dw/io/XMLStreamReader');
var Logger = require('dw/system/Logger').getLogger('Bazaarvoice', 'bvImportLocalizedRatingFeed.ds');

var BV_Constants = require('int_bazaarvoice/cartridge/scripts/lib/libConstants').getConstants();
var BVHelper = require('int_bazaarvoice/cartridge/scripts/lib/libBazaarvoice').getBazaarVoiceHelper();

function execute(pdict) {
    var localeID = pdict.LocaleID;
    var bvLocales = pdict.BVLocales;
    
    try {
    	
    	//clean all the product first
    	var products = ProductMgr.queryAllSiteProducts();
		while(products.hasNext()){
			var product = products.next();			
			if(!empty(product.custom.bvAverageRating) || !empty(product.custom.bvReviewCount) || !empty(product.custom.bvRatingRange)){
				product.custom.bvAverageRating = '0.0';
				product.custom.bvReviewCount = '0';
				product.custom.bvRatingRange = '0';
			}
		}
		products.close();
    	
        var tempFile = pdict.TempFile;
        
        var productIds = [];     
	    var xmlReader = new XMLStreamReader(new FileReader(tempFile, 'UTF-8'));
	    
	    var productXML = null;
	    var iProcessed = 0;
	    var iFailed = 0;
	    var id = '';
	    var bvAverageRating = '';
	    var bvReviewCount = '';
	    var bvRatingRange = '';
	    
	    var reg = /^\d{4}-[a-z]{2}_[a-zA-Z]{2}$/;
	    
	    while(xmlReader.hasNext()) {	  
			xmlReader.next();	
			if (xmlReader.getEventType() == XMLStreamConstants.START_ELEMENT && xmlReader.getLocalName() == 'Product')
			{
				productXML = xmlReader.readXMLObject();
				id = '';
				bvAverageRating = '0';
				bvReviewCount = '0.0';
				bvRatingRange = '0';
				
				var ns = productXML.namespace();
				if(!empty(productXML.ns::ExternalId.toString())){
					id = productXML.ns::ExternalId.toString();
										
					var localeItemList = productXML.ns::ReviewStatistics.ns::LocaleDistribution.ns::LocaleDistributionItem;
					if (localeItemList.length() > 0) {	
						//for each(var localeItem : XML in localeItemList) {
						for(var i = 0; i < localeItemList.length(); i++) {
							var localeItem = localeItemList[i];
							var bvLocale = bvLocales.get(localeID);
							if(bvLocale != null){					    	
						    	if(!empty(localeItem.ns::DisplayLocale.toString()) && localeItem.ns::DisplayLocale.toString().equals(bvLocale)){
													
									if (!empty(localeItem.ns::ReviewStatistics.ns::AverageOverallRating.toString())) {
									    bvAverageRating = localeItem.ns::ReviewStatistics.ns::AverageOverallRating.toString();
									}
									if (!empty(localeItem.ns::ReviewStatistics.ns::TotalReviewCount.toString())) {
									    bvReviewCount = localeItem.ns::ReviewStatistics.ns::TotalReviewCount.toString();
									}
									if (!empty(localeItem.ns::ReviewStatistics.ns::OverallRatingRange.toString())) {
									    bvRatingRange = localeItem.ns::ReviewStatistics.ns::OverallRatingRange.toString();
									}
	
									break;
								}
							}
						}
					
						var product = ProductMgr.getProduct(BVHelper.decodeId(id));
						if (product != null) {
						    product.custom.bvAverageRating = bvAverageRating;
						    product.custom.bvReviewCount = bvReviewCount;
						    product.custom.bvRatingRange = bvRatingRange;
						    
						    iProcessed++;
						} else {
						    iFailed++;
						}
					}
	    		}
	    	}
	    }
	    xmlReader.close();
	
		pdict.Message = StringUtils.format(BV_Constants.MESSAGE_TEMPLATE_LOCALE, 'SUCCESS', 'Import Processed - Connecton Details', '', '', '', '', '', localeID)
	    pdict.Message += 'Total Record Updated: ' + + iProcessed.toString() + '\n';
	    pdict.Message += 'Total Record Failed: ' + iFailed.toString() + '\n';

    } catch (ex) {
		Logger.error('Exception caught: {0}', ex.message);
        pdict.Message = StringUtils.format(BV_Constants.MESSAGE_TEMPLATE_LOCALE, 'ERROR', 'Exception=' + ex.message, '', '', '', '', '', localeID);
        return PIPELET_ERROR;
    }

    return PIPELET_NEXT;
}