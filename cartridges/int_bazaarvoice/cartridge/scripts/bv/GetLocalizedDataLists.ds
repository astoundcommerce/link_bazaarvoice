/**
* GetLocalizedDataLists.ds
* get product and category localized object list
*
*
* @output CategoryObjects : dw.util.Iterator
* @output ProductObjects : dw.util.Iterator
*
*/
var ArrayList = require('dw/util/ArrayList');
var CatalogMgr = require('dw/catalog/CatalogMgr');
var ProductMgr = require('dw/catalog/ProductMgr');

var BV_Constants = require('int_bazaarvoice/cartridge/scripts/lib/libConstants').getConstants();
var Category_Object = require('int_bazaarvoice/cartridge/scripts/model/LocalizedCategory');
var Product_Object = require('int_bazaarvoice/cartridge/scripts/model/LocalizedProduct');
 
function execute(pdict) {
	var catObjects = new ArrayList();
	var prodObjects = new ArrayList();
	
	var catalog = CatalogMgr.getSiteCatalog();
	var root = catalog.getRoot();
    var topCats = root.getSubCategories();
    for(var i = 0; i < topCats.length; i++) {
    	var topCat = topCats[i];
		setCategory(topCat, catObjects);
    }
	
	var productIterator = ProductMgr.queryAllSiteProducts();
    while(productIterator.hasNext()) {
        var product = productIterator.next();
        if(product.online && product.searchable && (BV_Constants.EnableProductFamilies || !product.variant)) {
            var prodObject = Product_Object.getProductObject();
            prodObject.create(product.ID);
            
            prodObjects.add(prodObject);
        }
    }
    productIterator.close();
    
    pdict.CategoryObjects = catObjects.iterator();
    pdict.ProductObjects = prodObjects.iterator();
	
    return PIPELET_NEXT;
}

function setCategory(cat, catObjects){
    var catObject = Category_Object.getCategoryObject();
	catObject.create(cat.ID);
		
	catObjects.add(catObject);
	var subCats = cat.getSubCategories();
    if(subCats != null && subCats.size() > 0) {
        for(var i = 0; i < subCats.length; i++) {
        	var subCat = subCats[i];
            setCategory(subCat, catObjects);
        }
    }
}
