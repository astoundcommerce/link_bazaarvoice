<iscomment>
	This template renders a product in the search result using a ProductSearchHit object.
</iscomment>

<isif condition="${!empty(ProductHit) && !empty(ProductHit.product)}">
	<iscomment>Set the product of the product search hit locally for reuse</iscomment>
	<isset name="Product" value="${ProductHit.product}" scope="page"/>
	
	<iscomment>
		Get the colors selectable from the current product master or variant range if we
		need to determine them based on a search result.
	</iscomment>
	<isscript>
		var selectableColors : dw.util.Collection = new dw.util.ArrayList();
		var varAttrColor : dw.catalog.ProductVariationAttribute = null;
		
		if( Product.master )
		{
			var varModel : dw.catalog.ProductVariationModel = Product.variationModel;
			varAttrColor = varModel.getProductVariationAttribute("color");
	
			if( varAttrColor != null )
			{
				selectableColors = ProductHit.getRepresentedVariationValues( varAttrColor );
			}
		}
	</isscript>
	
    <iscomment>
		Generate link to product detail page: by default it's just the product of the product search hit.
		If a color variation is available, the first color is used as link URL.
	</iscomment>
	<isset name="productUrl" value="${URLUtils.http('Product-Show', 'pid', Product.ID)}" scope="page"/>
	<isif condition="${!empty(selectableColors) && selectableColors.size() > 0 && !empty(varAttrColor)}">
		<isset name="productUrl" value="${Product.variationModel.url('Product-Show', varAttrColor, selectableColors.get(0))}" scope="page"/>
	</isif>

    <iscomment>append the paging parameters to the product URL</iscomment>
	<isset name="productUrl" value="${productUrl.append('start', starting)}" scope="page"/>

	<iscomment>append the search query parameters to the product URL</iscomment>
	<isif condition="${!empty(pdict.ProductSearchResult)}">
		<isset name="productUrl" value="${pdict.ProductSearchResult.url( productUrl )}" scope="page"/>
	</isif>

	<div class="product producttile"><!-- dwMarker="product" dwContentID="${Product.UUID}" -->
		<isobject object="${ProductHit}" view="searchhit">
			<div class="image">
			
				<iscomment>Render the thumbnail</iscomment>
				<div class="thumbnail">
					
					<iscomment>Determine the correct image, either first displayed color variation or default product thumbnail</iscomment>
					<isif condition="${!empty(selectableColors) && selectableColors.size() > 0}">
						<isset name="firstColorVariation" value="${selectableColors.get(0)}" scope="page"/>
						<isset name="image" value="${firstColorVariation.getImage('medium')}" scope="page"/>
					<iselse/>
						<isset name="image" value="${Product.getImage('medium',0)}" scope="page"/>
					</isif>
					
					<iscomment>If image couldn't be determined, display a "no image" medium</iscomment>
					<isif condition="${!empty(image)}">
						<isset name="thumbnailUrl" value="${image.url}" scope="page"/>
						<isset name="thumbnailAlt" value="${image.alt}" scope="page"/>
						<isset name="thumbnailTitle" value="${image.title}" scope="page"/>
					<iselse/>
						<isset name="thumbnailUrl" value="${URLUtils.staticURL('/images/noimagemedium.png')}" scope="page"/>
						<isset name="thumbnailAlt" value="${Product.name}" scope="page"/>
						<isset name="thumbnailTitle" value="${Product.name}" scope="page"/>
					</isif>
	
					<p class="productimage">
						<a href="${productUrl}" title="${Product.name}"><img src="${thumbnailUrl}" alt="${thumbnailAlt}" title="${thumbnailTitle}" /></a>
					</p>
					<!-- IE Hack to Collaspe DIV with display:none -->
				</div>
	
				<div class="quickviewbutton">
					<a href="${productUrl}" title="${Product.name}"><!-- QUICKVIEW BUTTON --></a>
				</div><!-- END: quickviewbutton -->
	
			</div><!-- END: image -->
			<div class="swatches">
	
				<iscomment>
					Render the color swatch secion for a product search hit. The swatches depend on the products the search hit actually represents.
					Doesn't necessarily equal all variants of a product master, since only a sub set of variants could be represented by the search
					hit (a variant group). We show color swatches only for variant groups represented by a product search hit.
				</iscomment>
				<isif condition="${!empty(selectableColors) && selectableColors.size() > 1 && !empty(varAttrColor)}">
	
					<iscomment>render a link to the palette and hide the actual palette if there are more than five colors contained</iscomment>
					<isif condition="${selectableColors.size() > 5}">
						<a class="productswatchesall">${Resource.msg('productresultarea.viewallcolors','search',null)}</a> (<isprint value="${selectableColors.size()}"/>)
					</isif>
	
					<iscomment>render the palette, the first swatch is always preselected</iscomment>
					<div class="palette<isif condition="${selectableColors.size() > 5}"> invisible</isif>">
						<div class="innerpalette">
							<isloop items="${selectableColors}" var="colorValue" status="varloop">
	
								<iscomment>Determine the swatch and the thumbnail for this color</iscomment>
								<isset name="colorSwatch" value="${colorValue.getImage('swatch')}" scope="page"/>
								<isset name="colorThumbnail" value="${colorValue.getImage('medium')}" scope="page"/>
	
								<iscomment>If images couldn't be determined, display a "no image" thumbnail</iscomment>
								<isif condition="${!empty(colorSwatch)}">
									<isset name="swatchUrl" value="${colorSwatch.url}" scope="page"/>
									<isset name="swatchAlt" value="${colorSwatch.alt}" scope="page"/>
									<isset name="swatchTitle" value="${colorSwatch.title}" scope="page"/>
								<iselse/>
									<isset name="swatchUrl" value="${URLUtils.staticURL('/images/noimagesmall.png')}" scope="page"/>
									<isset name="swatchAlt" value="${colorValue.displayValue}" scope="page"/>
									<isset name="swatchTitle" value="${colorValue.displayValue}" scope="page"/>
								</isif>
								<isif condition="${!empty(colorThumbnail)}">
									<isset name="thumbnailUrl" value="${colorThumbnail.url}" scope="page"/>
									<isset name="thumbnailAlt" value="${colorThumbnail.alt}" scope="page"/>
									<isset name="thumbnailTitle" value="${colorThumbnail.title}" scope="page"/>
								<iselse/>
									<isset name="thumbnailUrl" value="${URLUtils.staticURL('/images/noimagesmall.png')}" scope="page"/>
									<isset name="thumbnailAlt" value="${colorValue.displayValue}" scope="page"/>
									<isset name="thumbnailTitle" value="${colorValue.displayValue}" scope="page"/>
								</isif>
								
								<iscomment>build the proper URL and append the search query parameters</iscomment>
							    <isset name="swatchproductUrl" value="${Product.variationModel.url('Product-Show', varAttrColor, colorValue.value).append('start', starting)}" scope="page"/>
							    <isif condition="${!empty(pdict.ProductSearchResult)}">
								    <isset name="swatchproductUrl" value="${pdict.ProductSearchResult.url( swatchproductUrl )}" scope="page"/>
							    </isif>
	
								<iscomment>render a single swatch, the url to the proper product detail page is contained in the href of the swatch link</iscomment>
								<a class="swatch <isif condition="${varloop.first}">selected</isif>" title="<isprint value="${colorValue.displayValue}"/>" href="${swatchproductUrl}">
									<img class="swatchimage" src="${swatchUrl}" alt="${swatchAlt}" title="${swatchTitle}"/>
									<img class="swatchimage hiddenthumbnail" src="${thumbnailUrl}" alt="${thumbnailAlt}" title="${thumbnailTitle}"/>
								</a>
	
							</isloop>
							<div class="clear"><!-- FLOAT CLEAR --></div>
						</div>
					</div>
				</isif>
	
			</div><!-- END:  -->
			<div class="name">
				<a href="${productUrl}" title="${Product.name}">
					<isprint value="${Product.name}"/>
				</a>
			</div><!-- END: name -->
			<div class="pricing">
	
				<iscomment>Renders pricing information depending on the option or variation model, as well as scaled prices and so on.</iscomment>
				<div class="price">
					<isif condition="${Product.productSet}">
						<iscomment>Product set pricing</iscomment>
						<div class="productsetprice">${Resource.msg('global.buyall','locale',null)}</div>
					<iselseif condition="${Product.master && ProductHit.priceRange}"/>
						<iscomment>Product master price range depending on the represented variants</iscomment>						
							<div class="salesprice"><isprint value="${ProductHit.minPrice}"/> - <isprint value="${ProductHit.maxPrice}"/></div>
					<iselse/>						
						<iscomment>For Product master without a price range get the pricing from firstRepresentedProduct </iscomment>
						<isif condition="${Product.master && !ProductHit.priceRange}"/>
							<iscomment>Preserve current product instance</iscomment>
							<isset name="OrgProduct" value="${Product}" scope="page"/>
							<isset name="Product" value="${ProductHit.firstRepresentedProduct}" scope="page"/>
						</isif>
						<iscomment>
							Regular pricing through price model of the product. If the product is an option product,
							we have to initialize the product price model with the option model.
						</iscomment>
						<isif condition="${Product.optionProduct}">
							<isset name="PriceModel" value="${Product.getPriceModel(Product.getOptionModel())}" scope="page"/>
						<iselse/>
							<isset name="PriceModel" value="${Product.getPriceModel()}" scope="page"/>
						</isif>
	
						<iscomment>
							Check whether the product has price in the sale pricebook. If so, then
							display two prices: crossed-out standard price and sales price.
						</iscomment>
						<isinclude template="product/components/standardprice"/>
						<isset name="SalesPrice" value="${PriceModel.getPrice()}" scope="page"/>
						<isset name="ShowStandardPrice" value="${StandardPrice.available && SalesPrice.available && StandardPrice.compareTo(SalesPrice) == 1}" scope="page"/>
	
						<isif condition="${ShowStandardPrice}">
							<div class="discountprice">
								<div class="standardprice"><isprint value="${StandardPrice}"/></div>
								<div class="salesprice"><isprint value="${SalesPrice}"/></div>
							</div>
						<iselse/>
							<div class="salesprice"><isprint value="${SalesPrice}"/></div>
						</isif>
						<isif condition="${!empty(pdict.OrgProduct)}">
							<iscomment>Restore current product instance</iscomment>
							<isset name="Product" value="${OrgProduct}" scope="page"/>
							<isset name="OrgProduct" value="${null}" scope="page"/>
						</isif>
					</isif>
				</div>
	
			</div><!-- END: pricing -->
			<isinclude template="bv/display/rr/inlineratings"/>
			<div class="promo">
	
				<iscomment>Render information on active product promotions</iscomment>
				<isset name="promos" value="${dw.campaign.PromotionMgr.activeCustomerPromotions.getProductPromotions(Product)}" scope="page"/>
				<isif condition="${!empty(promos)}">
					<isloop items="${promos}" var="promo">
						<div class="promotionalMessage">
							<isprint value="${promo.calloutMsg}" encoding="off"/>
						</div>
					</isloop>
				</isif>
	
			</div><!-- END: promo -->

	
			<iscomment>
				Render the compare checkbox, if search result is based on a category context.
				The checkbox is displayed if either the category or one of its parent categories
				has the custom attribute "enableCompare" set to true.
			</iscomment>
			<isscript>
				var cat 			= pdict.ProductSearchResult.category,
					enableCompare 	= false;
				
				while (cat != null) {
					if ('enableCompare' in cat.custom && cat.custom.enableCompare) {
						enableCompare = true;
						break;
					}
					cat = cat.parent;
				}
			</isscript>
	        <isif condition="${!empty(pdict.ProductSearchResult) && !empty(pdict.ProductSearchResult.category) && enableCompare}">
		        <div class="compare">
					<isif condition="${!Product.productSet && !Product.bundle}">
						<isscript>
							// mark the compare checkbox checked if the current product is 
							// in the current comparison list for the current category
							
							importScript( "catalog/libCompareList.ds" );
							importScript( "common/libJson.ds" );

							var comparison = GetProductCompareList();
							// Set the category
							comparison.setCategory(pdict.ProductSearchResult.category.ID);
	
							var comparisonProducts = null;
							
							if (comparison) {
								comparisonProducts = comparison.getProducts();
							}
							
							var checkedStr = '';
							
							if (!empty(comparisonProducts)) {								
								var pIt = comparisonProducts.iterator();
								var productId = null;
								
								while (pIt.hasNext()) {
									productId = pIt.next();									
									if (productId == Product.ID) {
										checkedStr = 'checked=true';
										break;
									}
								}
							}		    				
		    			</isscript>	
						<isset name="compareId" value="${dw.util.UUIDUtils.createUUID()}" scope="page"/>
						<input type="checkbox" id="compare${compareId}" class="compareCheck" ${checkedStr}/>
						<span class="hidden json">{boxId:"compare${compareId}", id:"<isprint value="${escapeJsonString(Product.ID)}"/>", catId:"<isprint value="${escapeJsonString(pdict.ProductSearchResult.category.ID)}"/>"}</span><!-- this MUST be immediately after the input/field tag. Hiden data to be attached to the input field (app.hiddenData in app.js -->
						<label for="compare${compareId}">Compare</label>						
					</isif>
				</div><!-- END: compare -->
			</isif>
			<div class="clear"><!-- FLOAT CLEAR --></div>
		</isobject>
	</div><!-- END: producttile -->
<iselse/>
	<!-- ProductSearchHit was not in dictionary, so blank. -->
</isif>